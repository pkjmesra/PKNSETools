
import urllib
import warnings
from io import StringIO

import pandas as pd
import requests
from bs4 import BeautifulSoup

warnings.simplefilter("ignore", DeprecationWarning)
warnings.simplefilter("ignore", FutureWarning)
import pandas as pd
from PKDevTools.classes.CookieHelper import CookieHelper
from PKDevTools.classes import Archiver
from PKDevTools.classes.ColorText import colorText
from PKDevTools.classes.Fetcher import fetcher
from PKDevTools.classes.log import default_logger
from PKNSETools.morningstartools.stock import Stock
from PKDevTools.classes.Utils import random_user_agent
from PKDevTools.classes.PKDateUtilities import PKDateUtilities
# This Class Handles Fetching of Stock Data over the internet from NSE/BSE

class morningstarDataFetcher(fetcher):
    def fetchMorningstarTopDividendsYieldStocks(self):
        url = "https://lt.morningstar.com/api/rest.svc/g9vi2nsqjb/security/screener?page=1&pageSize=100&sortOrder=dividendYield%20desc&outputType=json&version=1&languageId=en&currencyId=BAS&universeIds=E0EXG%24XBOM%7CE0EXG%24XNSE&securityDataPoints=secId%2Cname%2CexchangeId%2CsectorId%2CindustryId%2CmarketCap%2CdividendYield%2CclosePrice%2CpriceCurrency%2CPEGRatio%2CpeRatio%2CquantitativeStarRating%2CequityStyleBox%2CgbrReturnM0%2CgbrReturnD1%2CgbrReturnW1%2CgbrReturnM1%2CgbrReturnM3%2CgbrReturnM6%2CgbrReturnM12%2CgbrReturnM36%2CgbrReturnM60%2CgbrReturnM120%2CrevenueGrowth3Y%2CdebtEquityRatio%2CnetMargin%2Croattm%2Croettm%2Cexchange&filters=&term="
        res = self.fetchURL(url)
        if res is None or res.status_code != 200:
            return None
        try:
            data = pd.read_json(StringIO(res.text))
            rows = data["rows"]
            output = pd.DataFrame()
            for row in rows:
                df_row = pd.DataFrame([row], columns=["name", "marketCap","exchangeId", "dividendYield", "closePrice","peRatio"])
                output = pd.concat([output, df_row], ignore_index=True)
            output.sort_values(by=["dividendYield"],ascending=False,inplace=True)
            output = output.head(100)
            output.loc[:, "name"] = output.loc[:, "name"].apply(
                        lambda x: " ".join(x.split(" ")[:6]).replace("Ordinary Shares","").replace("Shs Dematerialised","")
                    )
            output["marketCap"] = output["marketCap"].astype(str)
            output.loc[:, "marketCap"] = output.loc[:, "marketCap"].apply(
                        lambda x: colorText.FAIL + str("{:.2f}".format(float(x)/10000000)).replace("nan","-")+ colorText.END
                    )
            output["dividendYield"] = output["dividendYield"].astype(str)
            output.loc[:, "dividendYield"] = output.loc[:, "dividendYield"].apply(
                        lambda x: colorText.GREEN + str("{:.2f}".format(float(x)))+ colorText.END
                    )
            output["closePrice"] = output["closePrice"].astype(str)
            output.loc[:, "closePrice"] = output.loc[:, "closePrice"].apply(
                        lambda x: colorText.FAIL + str("{:.2f}".format(float(x)))+ colorText.END
                    )
            output["peRatio"] = output["peRatio"].astype(str)
            output.loc[:, "peRatio"] = output.loc[:, "peRatio"].apply(
                        lambda x: colorText.GREEN + str("{:.2f}".format(float(x))).replace("nan","-")+ colorText.END
                    )
            output["exchangeId"] = output["exchangeId"].astype(str)
            output.loc[:, "exchangeId"] = output.loc[:, "exchangeId"].apply(
                        lambda x: colorText.FAIL + ("BSE" if (x == "EX$$$$XBOM" or "BOM" in x) else "NSE") + colorText.END
                    )
            output.drop_duplicates(subset=['name'], keep='last',inplace=True)
            output = output.head(100)
            output["Stock"] = output["name"]
            try:
                output.loc[:, "Stock"] = output.loc[:, "Stock"].apply(
                            lambda x: self.searchStockTickerByFullName(x)
                        )
            except ValueError as e:
                default_logger().debug(e, exc_info=True)
                pass
            output.rename(
                columns={
                    "name": f"Name",
                    "marketCap": f"Market Cap. (Cr)",
                    "exchangeId": f"Exchange",
                    "dividendYield": f"Dividend (%)",
                    "closePrice": f"LTP",
                    "peRatio": f"PE",
                },
                inplace=True,
            )
            output.set_index("Stock", inplace=True)
            return output
        except Exception as e:
            default_logger().debug(e, exc_info=True)
            pass
        return None

    def prepareASPNETFormDataForPost(self, soup):
        # soup = BeautifulSoup(page.content,features="lxml")
        viewstate = soup.select_one("#__VIEWSTATE")["value"]
        viewstategenerator = soup.select_one("#__VIEWSTATEGENERATOR")["value"]
        eventtarget = soup.select_one("#__EVENTTARGET")["value"]
        eventargument = soup.select_one("#__EVENTARGUMENT")["value"]
        eventValidator = soup.select_one("#__EVENTVALIDATION")["value"]
        data = {
                r'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$scriptMgr': r'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$upnlSectorExposure|ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$btnGo',
                r'__EVENTTARGET': eventtarget,
                r'__EVENTARGUMENT': eventargument,                
                r'___VIEWSTATE': viewstate,
                r'__VIEWSTATEGENERATOR': viewstategenerator,
                r'__EVENTVALIDATION': eventValidator,
                r'__ASYNCPOST': r'true',
                r'ctl00$ctl00$hdnEnvironemnt': 'prod',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl01$navID': 'mnuHome',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl02$navID': 'mnuPortfolio',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl03$navID': 'mnuFunds',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl04$navID': 'mnuEquities',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl05$navID': 'mnuPersonalFinance',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl06$navID': 'mnuTools',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl07$navID': 'mnuArchives',
                r'ctl00$ctl00$navigation$rptNavigationMenu$ctl08$navID': 'mnuAdviser',
                r'ctl00$ctl00$ucHeader$txtQuote$txtAutoComplete': 'MF/Stock/ULIP',
                r'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$txtNumber': '100',
                r'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$drpSort': 'NoOfFunds',
                r'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$hdnSelectedTool': '10',
                r'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$btnGo': 'Go',
            }
        return urllib.parse.urlencode(data)
        
    def fetchMorningstarFundFavouriteStocks(self, sortby="ChangeInShares"):
        getURL = "https://morningstar.in/tools/most-popular-stocks-in-mutual-fund.aspx"
        getRes = self.fetchURL(getURL)
        headers = {
            'authority': 'www.morningstar.in',
            'accept': '*/*',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'no-cache',
            'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'cookie': 'ASP.NET_SessionId=oykrok0d3kmfpn5sq3453v05; ',
            'dnt': '1',
            'newrelic': 'eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjE1MjY4MjUiLCJhcCI6IjEzODYwMjM4ODEiLCJpZCI6Ijc3ZWVhNzI1YmNjZTQwNDUiLCJ0ciI6IjkyYzI4ZTgyNjYzODBkMDM3Zjk2MmQwMTVlNTU2NTAwIiwidGkiOjE3MDIyNDA1NDM2NDUsInRrIjoiMzU4OTQifX0=',
            'origin': 'https://www.morningstar.in',
            'referer': 'https://www.morningstar.in/tools/most-popular-stocks-in-mutual-fund.aspx',
            'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"macOS"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin',
            'traceparent': '00-92c28e8266380d037f962d015e556500-77eea725bcce4045-01',
            'tracestate': '35894@nr=0-1-1526825-1386023881-77eea725bcce4045----1702240543645',
            'user-agent': random_user_agent(),
            'x-microsoftajax': 'Delta=true',
            'x-newrelic-id': 'VQMFV15RDRABV1ZVAAEBUlUG',
            'x-requested-with': 'XMLHttpRequest',
        }
        headers['cookie'] = getRes.headers.get('Set-Cookie') if getRes is not None else ""

        data = {
            'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$scriptMgr': 'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$upnlSectorExposure|ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$btnGo',
            'ctl00$ctl00$hdnEnvironemnt': 'prod',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl01$navID': 'mnuHome',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl02$navID': 'mnuPortfolio',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl03$navID': 'mnuFunds',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl04$navID': 'mnuEquities',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl05$navID': 'mnuPersonalFinance',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl06$navID': 'mnuTools',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl07$navID': 'mnuArchives',
            'ctl00$ctl00$navigation$rptNavigationMenu$ctl08$navID': 'mnuAdviser',
            'ctl00$ctl00$ucHeader$txtQuote$txtAutoComplete': 'MF/Stock/ULIP',
            'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$txtNumber': '100',
            'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$drpSort': 'NoOfFunds' if sortby is None else sortby,
            'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$hdnSelectedTool': '10',
            '__EVENTTARGET': '',
            '__EVENTARGUMENT': '',
            '__VIEWSTATE': '',
            '__VIEWSTATEGENERATOR': 'BA27C21D',
            '__EVENTVALIDATION': '/wEdAAqMIty/lARO94JhHT7dKiEbzGvqj0LQwDEl6QJAf2zFDFIeowU56BUmY41PVQo8Jc/VnE7XYTkBEy82w3ee06voOBysIKP3SSsNiMiwxD0Lyke1b257mmI3w7D3EtSImELLS5glg/W3DitsKm/Jz+B+5J9/i/PfGV/ARoWyvyT3Gj8OdBTQ7cq5R36dNtedm0RNW/ecneq9VHKjWfGi8mxyFlMCqSAo1EuNwDx086iKYmuIXPQPnVETgrnTq12rlTg=',
            '__ASYNCPOST': 'true',
            'ctl00$ctl00$ContentPlaceHolder1$contentResearchTools$ctl00$btnGo': 'Go',
        }

        try:
            res = requests.post('https://www.morningstar.in/tools/most-popular-stocks-in-mutual-fund.aspx', headers=headers, data=data)
            if res is None or res.status_code != 200:
                return None
            json_text = res.content
            json_data = json_text #json.loads(json_text)
            result_soup = BeautifulSoup(json_data,'html.parser')
            t = result_soup.find_all('table')[2]
            df = pd.read_html(StringIO(str(t)))
            output = pd.concat([df[0], df[1]], ignore_index=True)
            output.drop_duplicates(subset=['Name'], keep='last',inplace=True)
            output = output.dropna()
            output = output.drop('Unnamed: 0', axis=1)
            if sortby == "NoOfFunds":
                output.sort_values(by=["No Of  Funds"],ascending=False,inplace=True)
            elif sortby == "ChangeInShares":
                output.sort_values(by=["Change  In Shares"],ascending=False,inplace=True)
            output = output.head(100)
            output.loc[:, "Name"] = output.loc[:, "Name"].apply(
                        lambda x: " ".join(x.split(" ")[:6]).replace("Ordinary Shares","").replace("Shs Dematerialised","")
                    )
            output["No Of  Shares"] = output["No Of  Shares"].astype(str)
            output.loc[:, "No Of  Shares"] = output.loc[:, "No Of  Shares"].apply(
                        lambda x: colorText.FAIL + str("{:.2f}".format(float(x)/1000000)).replace("nan","-")+ "M" + colorText.END
                    )
            output["Market Value  (Mil)"] = output["Market Value  (Mil)"].astype(str)
            output.loc[:, "Market Value  (Mil)"] = output.loc[:, "Market Value  (Mil)"].apply(
                        lambda x: colorText.FAIL + str("{:.2f}".format(float(x))).replace("nan","-")+ "M" + colorText.END
                    )
            output["Weighting  %"] = output["Weighting  %"].astype(str)
            output.loc[:, "Weighting  %"] = output.loc[:, "Weighting  %"].apply(
                        lambda x: colorText.FAIL + str("{:.2f}".format(float(x))).replace("nan","-") + colorText.END
                    )
            output["No Of  Funds"] = output["No Of  Funds"].astype(str)
            output.loc[:, "No Of  Funds"] = output.loc[:, "No Of  Funds"].apply(
                        lambda x: colorText.FAIL + str("{:.2f}".format(float(x))).replace("nan","-") + colorText.END
                    )
            output["Prev No  Of Shares"] = output["Prev No  Of Shares"].astype(str)
            output.loc[:, "Prev No  Of Shares"] = output.loc[:, "Prev No  Of Shares"].apply(
                        lambda x: colorText.FAIL + str("{:.2f}".format(float(x)/1000000)).replace("nan","-")+ "M" + colorText.END
                    )
            output["Change  In Shares"] = output["Change  In Shares"].astype(str)
            output.loc[:, "Change  In Shares"] = output.loc[:, "Change  In Shares"].apply(
                        lambda x: (colorText.GREEN if float(x) > 0 else colorText.FAIL)+ str("{:.2f}".format(float(x)/1000000)).replace("nan","-")+ "M" + colorText.END
                    )
            output["Stock"] = output["Name"]
            try:
                output.loc[:, "Stock"] = output.loc[:, "Stock"].apply(
                            lambda x: self.searchStockTickerByFullName(x)
                        )
            except ValueError as e:
                default_logger().debug(e, exc_info=True)
                pass
            output.set_index("Stock", inplace=True)
            return output
        except Exception as e:
            default_logger().debug(e, exc_info=True)
            pass
        return None
    
    def searchStockTickerByFullName(self, fullName):
        ticker = fullName.replace("*","").strip()
        try:
            ticker = Stock(ticker).ticker
        except:
            pass
        return ticker.split(" ")[0].upper()
    # https://www.morningstar.com/stocks/xnse/idea/ownership
    # https://api-global.morningstar.com/sal-service/v1/stock/ownership/v1/0P0000C2H4/OwnershipData/mutualfund/20/data?languageId=en&locale=en&clientId=MDC&component=sal-ownership&version=4.14.0
    # For each stock: https://api-global.morningstar.com/sal-service/v1/stock/header/v2/data/0P0000N0EO/securityInfo?showStarRating=&languageId=en&locale=en&clientId=RSIN_SAL&component=sal-quote&version=4.13.0&access_token=JrelGdhGkgqeSJhy7BufcEzwN0sb
    # Get accessToken from <meta> from https://morningstar.in/stocks/0p0000vp2q/bse-alliance-integrated-metaliks-ltd/overview.aspx
    # Major ownership data: https://api-global.morningstar.com/sal-service/v1/stock/ownership/v1/0P0000C2H4/OwnershipData/institution/20/data?languageId=en&locale=en&clientId=MDC&component=sal-ownership&version=4.14.0
    # ESG risk score: https://api-global.morningstar.com/sal-service/v1/stock/esgRisk/0P0000C2H4/data?languageId=en&locale=en&clientId=MDC&component=sal-eqsv-risk-rating-assessment&version=4.14.0
    # https://www.morningstar.com/stocks/xnse/idea/sustainability
    # curl 'https://17iqhzwxzw-dsn.algolia.net/1/indexes/companies/query?x-algolia-agent=Algolia%20for%20JavaScript%20(4.4.0)%3B%20Browser%20(lite)&x-algolia-api-key=be7c37718f927d0137a88a11b69ae419&x-algolia-application-id=17IQHZWXZW' \
    # -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' \
    # -H 'content-type: application/x-www-form-urlencoded' \
    # --data-raw '{"query":"531889","highlightPostTag":" ","highlightPreTag":" ","restrictHighlightAndSnippetArrays":true}' \
    # --compressed
    # https://simplywall.st/stocks/in/tech/bse-530343/genus-power-infrastructures-shares
    # https://lt.morningstar.com/api/rest.svc/g9vi2nsqjb/security/screener?languageId=en&currencyId=BAS&universeIds=E0EXG%24XBOM%7CE0EXG%24XNSE&outputType=json&filterDataPoints=sectorId%7CindustryId&filters=%7B%7D
    def fetchMorningstarStocksPerformanceForExchange(self):
        url = "https://lt.morningstar.com/api/rest.svc/g9vi2nsqjb/security/screener?page=1&pageSize=2500&sortOrder=name%20asc&outputType=json&version=1&languageId=en&currencyId=BAS&universeIds=E0EXG%24XBOM%7CE0EXG%24XNSE&securityDataPoints=secId%2Cname%2CexchangeId%2CsectorId%2CindustryId%2CmarketCap%2CdividendYield%2CclosePrice%2CpriceCurrency%2CPEGRatio%2CpeRatio%2CquantitativeStarRating%2CequityStyleBox%2CgbrReturnM0%2CgbrReturnD1%2CgbrReturnW1%2CgbrReturnM1%2CgbrReturnM3%2CgbrReturnM6%2CgbrReturnM12%2CgbrReturnM36%2CgbrReturnM60%2CgbrReturnM120%2CrevenueGrowth3Y%2CdebtEquityRatio%2CnetMargin%2Croattm%2Croettm%2Cexchange&filters=&term="
        res = self.fetchURL(url)
        if res is None or res.status_code != 200:
            return None
        try:
            data = pd.read_json(StringIO(res.text))
            rows = data["rows"]
            output = pd.DataFrame()
            for row in rows:
                df_row = pd.DataFrame([row]), #columns=["name", "marketCap","exchangeId", "dividendYield", "closePrice","peRatio"])
                output = pd.concat([output, df_row[0]], ignore_index=True)
            output.drop_duplicates(subset=['name'], keep='first',inplace=True)
            output = output[["name","exchangeId","sectorId","industryId","closePrice","gbrReturnM0","gbrReturnD1","gbrReturnW1","gbrReturnM1","gbrReturnM3","gbrReturnM6","gbrReturnM12","gbrReturnM36","gbrReturnM60","gbrReturnM120","marketCap","dividendYield","peRatio","quantitativeStarRating","equityStyleBox","revenueGrowth3Y","debtEquityRatio","netMargin","roattm","roettm","PEGRatio"]]
            output = output.head(100)
            output["Stock"] = output["name"]
            try:
                output.loc[:, "Stock"] = output.loc[:, "Stock"].apply(
                            lambda x: self.searchStockTickerByFullName(x)
                        )
            except ValueError as e:
                default_logger().debug(e, exc_info=True)
                pass
            output.rename(
                columns={
                    "name": f"Name",
                    # "marketCap": f"Market Cap. (Cr)",
                    # "exchangeId": f"Exchange",
                    # "dividendYield": f"Dividend (%)",
                    # "closePrice": f"LTP",
                    # "peRatio": f"PE",
                },
                inplace=True,
            )
            output.set_index("Stock", inplace=True)
            return output
        except Exception as e:
            pass
        return None

    def refreshBobCapsTokens(self):
        default_headers = {
            "Accept-Encoding": "gzip, deflate, br, zstd",
            "Accept-Language": "en-US,en;q=0.9",
            "DNT": "1",
            "Host": "www.barodaetrade.com",
            "Referer": "https://www.barodaetrade.com/Markettracker/Dividend_Declared",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": random_user_agent()
        }
        cookieHelper = CookieHelper(download_folder=Archiver.get_user_cookies_dir(),
                                                 baseCookieUrl="https://www.barodaetrade.com/Markettracker/Dividend_Declared",
                                                 cookieStoreName="bcaps",
                                                 baseHtmlUrl="https://www.barodaetrade.com/Markettracker/Dividend_Declared",
                                                 htmlStoreName="bcaps")
        self.session.headers.update(default_headers)
        self.session.cookies.update(cookieHelper.cookies)

    def getCorporateActions(self):
        self.refreshBobCapsTokens()
        dividends_df = pd.DataFrame([{"Company Name":""}])
        bonus_df = pd.DataFrame([{"Company Name":""}])
        stockSplit_df = pd.DataFrame([{"Company Name":""}])
        try:
            dividend_html = self.fetchURL("https://www.barodaetrade.com/Markettracker/Dividend_Declared")
            dividends_dfs = pd.read_html(dividend_html.text)
            dividends_df = dividends_dfs[1]
        except:
            pass
        try:
            bonus_html = self.fetchURL("https://www.barodaetrade.com/Markettracker/Bonous_Issue")
            bonus_dfs = pd.read_html(bonus_html.text)
            bonus_df = bonus_dfs[1]
        except:
            pass
        try:
            stockSplit_html = self.fetchURL("https://www.barodaetrade.com/Markettracker/Stock_Split")
            stockSplit_dfs = pd.read_html(stockSplit_html.text)
            stockSplit_df = stockSplit_dfs[1]
        except:
            pass
        dfs = [dividends_df,bonus_df,stockSplit_df]
        dateColumns = ["Record","Div.Date","Split","Announced"]
        for df in dfs:
            df.rename(
                    columns={
                        "Company Name": "Stock",
                        "Dividend Type": "Div.Type",
                        "Announcement Date": "Announced",
                        "Dividend Date": "Div.Date",
                        "Dividend (%)": "Div(%)",
                        "Record Date": "Record",
                        "Split Date": "Split",
                        "FV Before": "OldFV",
                        "FV After": "NewFV",
                        "Bonus Ratio": "Ratio",
                    },
                    inplace=True,
                )
            try:
                df.loc[:, "Stock"] = df.loc[:, "Stock"].apply(
                            lambda x: self.searchStockTickerByFullName(x)
                        )
                for col in dateColumns:
                    if col in df.columns:
                        df.loc[:, col] = df.loc[:, col].apply(
                                lambda x: PKDateUtilities.dateFromdbYString(x).strftime("%Y-%m-%d")
                            )
            except ValueError as e:
                default_logger().debug(e, exc_info=True)
                pass
        return dividends_df, bonus_df, stockSplit_df
